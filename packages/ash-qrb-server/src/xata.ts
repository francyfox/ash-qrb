// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "companies",
    columns: [
      {
        name: "created_at",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "'8rK33C3zH60BCenrF50Y_'::text",
      },
      {
        name: "name",
        type: "varchar(50)",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "payments",
        type: "multiple",
        notNull: true,
        unique: false,
        defaultValue: "ARRAY[]::text[]",
      },
      {
        name: "updated_at",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "now()",
      },
    ],
  },
  {
    name: "payments",
    columns: [
      {
        name: "created_at",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "'xxUgyjF8i7KxxaTZnIxRK'::text",
      },
      {
        name: "name",
        type: "varchar(255)",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "qr",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "updated_at",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "now()",
      },
    ],
  },
  {
    name: "users",
    columns: [
      {
        name: "company_id",
        type: "link",
        link: { table: "companies" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "created_at",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "full_name",
        type: "varchar(50)",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "has_messenger",
        type: "multiple",
        notNull: true,
        unique: false,
        defaultValue: "ARRAY[]::text[]",
      },
      {
        name: "hide_contacts",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "'IBmqY_oEVOEgsQJNyKpTL'::text",
      },
      {
        name: "phone",
        type: "varchar(18)",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "qr",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "role",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "100",
      },
      {
        name: "status",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "100",
      },
      {
        name: "tags",
        type: "multiple",
        notNull: true,
        unique: false,
        defaultValue: "ARRAY[]::text[]",
      },
      {
        name: "updated_at",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "now()",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Companies = InferredTypes["companies"];
export type CompaniesRecord = Companies & XataRecord;

export type Payments = InferredTypes["payments"];
export type PaymentsRecord = Payments & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  companies: CompaniesRecord;
  payments: PaymentsRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Danil-Golota-s-workspace-oddvjb.eu-west-1.xata.sh/db/ashqrb",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
